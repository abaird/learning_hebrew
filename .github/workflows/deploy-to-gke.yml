name: Build and Deploy to GKE

on:
  push:
    branches: [ main ]

env:
  PROJECT_ID: learning-hebrew-1758491674
  GKE_CLUSTER: learning-hebrew-cluster
  GKE_ZONE: us-central1
  DEPLOYMENT_NAME: learning-hebrew-app
  IMAGE: learning-hebrew
  REGISTRY_LOCATION: us-central1

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v5

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v3'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v3'

    - name: 'Use gcloud CLI'
      run: 'gcloud info'

    - name: 'Configure Docker to use gcloud as a credential helper'
      run: |-
        gcloud --quiet auth configure-docker $REGISTRY_LOCATION-docker.pkg.dev

    - name: 'Get GKE credentials'
      uses: 'google-github-actions/get-gke-credentials@v3'
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    - name: Build Docker Image
      run: |-
        docker build \
          --platform linux/amd64 \
          --tag "$REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$IMAGE/$IMAGE:$GITHUB_SHA" \
          --tag "$REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$IMAGE/$IMAGE:latest" \
          .

    - name: Publish Docker Image to Artifact Registry
      run: |-
        docker push "$REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$IMAGE/$IMAGE:$GITHUB_SHA"
        docker push "$REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$IMAGE/$IMAGE:latest"

    - name: Update Production Secrets
      run: |-
        # Create/update secrets from Google Secret Manager
        echo "üîê Updating production secrets from Google Secret Manager..."

        # Test access to secrets first
        echo "üß™ Testing secret access..."
        if ! gcloud secrets versions access latest --secret="postgres-user" > /dev/null 2>&1; then
          echo "‚ùå Cannot access postgres-user secret"
          gcloud secrets versions access latest --secret="postgres-user" || true
          exit 1
        fi

        # Delete existing secrets
        echo "üóëÔ∏è  Deleting existing secrets..."
        kubectl delete secret app-secrets -n learning-hebrew --ignore-not-found=true

        # Create new secrets with error handling
        echo "üîë Creating new secrets..."
        POSTGRES_USER=$(gcloud secrets versions access latest --secret="postgres-user")
        POSTGRES_PASSWORD=$(gcloud secrets versions access latest --secret="postgres-password")
        RAILS_MASTER_KEY=$(gcloud secrets versions access latest --secret="rails-master-key")
        SECRET_KEY_BASE=$(gcloud secrets versions access latest --secret="secret-key-base")

        echo "‚úÖ Retrieved all secrets successfully"

        kubectl create secret generic app-secrets \
          --from-literal=postgres-user="$POSTGRES_USER" \
          --from-literal=postgres-password="$POSTGRES_PASSWORD" \
          --from-literal=rails-master-key="$RAILS_MASTER_KEY" \
          --from-literal=secret-key-base="$SECRET_KEY_BASE" \
          -n learning-hebrew

        # Verify secret creation
        echo "üîç Verifying secret creation..."
        kubectl describe secret app-secrets -n learning-hebrew

    - name: Deploy to GKE
      run: |-
        # Update deployment environment variables with build info
        echo "üîß Updating deployment environment variables..."
        kubectl set env deployment/$DEPLOYMENT_NAME \
          GIT_SHA=$GITHUB_SHA \
          BUILD_NUMBER=$GITHUB_RUN_NUMBER \
          DEPLOYED_AT=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
          IMAGE_TAG=$GITHUB_SHA \
          -n learning-hebrew

        # Update the image in the deployment
        echo "üê≥ Updating container images..."
        kubectl set image deployment/$DEPLOYMENT_NAME rails-app=$REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$IMAGE/$IMAGE:$GITHUB_SHA -n learning-hebrew
        kubectl set image deployment/$DEPLOYMENT_NAME db-migrate=$REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/$IMAGE/$IMAGE:$GITHUB_SHA -n learning-hebrew

        # Wait for rollout with timeout
        echo "‚è≥ Waiting for deployment rollout (max 10 minutes)..."
        kubectl rollout status deployment/$DEPLOYMENT_NAME -n learning-hebrew --timeout=600s

        # Show final status
        echo "‚úÖ Deployment completed! Current status:"
        kubectl get pods -n learning-hebrew
        kubectl get services -o wide -n learning-hebrew