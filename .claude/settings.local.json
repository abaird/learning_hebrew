{
  "permissions": {
    "allow": [
      "Bash(chmod:*)",
      "Bash(kubectl get pods:*)",
      "Bash(docker push:*)",
      "Bash(kubectl logs:*)",
      "Bash(curl:*)",
      "Bash(docker buildx build:*)",
      "Bash(kubectl rollout restart:*)",
      "Bash(kubectl describe:*)",
      "Bash(script/test.sh:*)",
      "Bash(bundle exec rspec:*)",
      "Bash(kubectl wait:*)",
      "Bash(minikube stop:*)",
      "Bash(kubectl get secret:*)",
      "Bash(kubectl get:*)",
      "WebFetch(domain:docs.tilt.dev)",
      "Bash(tilt:*)",
      "Bash(brew search:*)",
      "Bash(env)",
      "Bash(minikube:*)",
      "Bash(bin/rails generate migration:*)",
      "Bash(kubectl exec:*)",
      "Bash(kubectl apply:*)",
      "Bash(kubectl rollout status:*)",
      "Bash(docker-compose:*)",
      "Bash(kubectl config:*)",
      "Bash(PGPASSWORD=password kubectl exec deployment/postgres -n learning-hebrew -- psql -U postgres -h localhost -c '\\l')",
      "Bash(kubectl run:*)",
      "Bash(kubectl delete deployment:*)",
      "Bash(git add:*)",
      "Bash(bin/rails generate:*)",
      "Bash(RAILS_ENV=test bin/rails db:create db:migrate)",
      "Bash(bin/rails:*)",
      "Bash(RAILS_ENV=test bin/rails db:schema:dump)",
      "Bash(cat:*)",
      "Bash(RAILS_ENV=test bin/rails runner \"\nActiveRecord::Base.transaction do\n  # Add foreign key columns\n  ActiveRecord::Migration.add_reference :words, :part_of_speech_category, foreign_key: true, null: true unless Word.column_names.include?(''part_of_speech_category_id'')\n  ActiveRecord::Migration.add_reference :words, :gender, foreign_key: true, null: true unless Word.column_names.include?(''gender_id'')\n  ActiveRecord::Migration.add_reference :words, :verb_form, foreign_key: true, null: true unless Word.column_names.include?(''verb_form_id'')\n  \n  # Add pos_display column\n  ActiveRecord::Migration.add_column :words, :pos_display, :string unless Word.column_names.include?(''pos_display'')\n  \n  # Remove part_of_speech column\n  ActiveRecord::Migration.remove_column :words, :part_of_speech if Word.column_names.include?(''part_of_speech'')\n  \n  puts ''Migration completed successfully!''\n  Word.reset_column_information\n  puts ''New columns: '' + Word.column_names.sort.join('', '')\nend\n\")",
      "Bash(find:*)"
    ],
    "deny": [],
    "ask": []
  }
}